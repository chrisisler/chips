#!/usr/bin/env bash

# This script does the following things and shows a red error and exits if any of the steps fail.
# 1. Installs NPM dependencies if not done so yet.
# 2. Ensures each file in src/ contains an @example, @param, and a @returns in the comments.
# 3. Runs the linter (eslint).
# 4. Runs the unit tests.

# https://robots.thoughtbot.com/shell-script-suggestions-for-speedy-setups
# Exit if any subcommand fails.
set -e

RED='\033[0;31m'
RED2='\033[1;31m'
BLUE='\033[0;34m'
NO_COLOR='\033[0m'

# Helper functions: input a string, output a colorized string.
success() {
    printf "${BLUE}✓ ${1}${NO_COLOR}\n"
}
failure() {
    printf "${RED}× ${1}${NO_COLOR}\n"
}

# Make sure that `npm install` has been done and a node_modules directory exists.
installDependencies() {
    if [ ! -d "$(pwd)/node_modules" ]; then
        printf "Installing dependencies..."
        npm install &>/dev/null

        if [[ "${?}" != 0 ]]; then # Check if npm install gave a non-zero exit code.
            failure "\nERR: Problem encountered when doing 'npm install'"
            exit 1
        else
            printf " done."
        fi
    fi
}

# TODO: Ensure every .js file in src/ and src/util/ has a test file in test/
# verifyTestsExist() { }

# Ensure that each .js file in src/ (and src/util/) has an @example, @param, and a @returns.
verifyComments() {
    local exitCode=0
    local comments=("@example" "@param" "@returns")
    for jsFile in $(find ./src -name "_*.js"); do
        for comment in "${comments[@]}"; do
            if ! grep -q "${comment}" "${jsFile}"; then
                failure "ERR: ${jsFile:6} is missing ${RED2}${comment}"
                exitCode=1
            fi
        done
    done

    if [[ "${exitCode}" != 0 ]]; then
        exit "${exitCode}"
    else
        success "Comments contain @example, @param, and @returns."
    fi
}

runLinter() {
    # The below command will exit this script on its own (w/o an explicit
    # `exit 1`) if there are lint errors. It will also display the errors,
    # so it does all the heavy lifting by itself (thanks npm and eslint).
    npm run -s lint
    success "No lint errors."
}

ensureAllTestsAreRan() {
    for jsTest in $(find ./test -name "*.js"); do
        if grep -q ".only(" "${jsTest}"; then
            failure "ERR: ${jsTest:2} test contains an 'only' statement."
            exit 1
        fi
    done
    success "No 'only' found in tests."
}

runTests() {
    # `npm` commands will error and exit on their own, unless in a subshell.
    local testResults="$(npm -s test)"
    local testsFailed="$(echo -n "${testResults}" | grep -q "failing" && echo -n "true")"

    if [[ "${testsFailed}" == "true" ]]; then
        failure "Tests failed."
        printf "${testResults}\n"
        exit 1
    fi

    npm -s test &>/dev/null

    success "Unit tests passed."
}

generateAPIDocsWrapper() {
    . "$(pwd)/scripts/generateAPIDocs"

    if [[ "${?}" != 0 ]]; then # Check if previous command gave a non-zero (bad) exit code.
        failure "\nERR: Problem encountered when generating API documentation."
        exit 1
    else
        success "API.md docs generated."
    fi
}

printf "\n"

installDependencies
verifyComments
runLinter
ensureAllTestsAreRan
runTests
generateAPIDocsWrapper
